{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./src/pages/index.jsx","webpack:///./src/components/Event.jsx","webpack:///./src/utils/translations/helpers.js","webpack:///./src/components/IndexPage.jsx"],"names":["formatDate","dateString","date","Date","getDate","getMonth","getFullYear","Index","data","siteTitle","site","siteMetadata","title","events","edges","langCode","pageQuery","EventCard","styled","article","colors","darkPink","darkGrey","lightPink","white","EventTitle","h3","DateSpan","span","EventInfo","div","StyledLink","Link","Event","host","slug","to","getTranslation","key","translations","EventContainer","ul","IndexPage","map","event","node","frontmatter","fields"],"mappings":"6FAAA,kCAAO,IAAMA,EAAa,SAAAC,GACxB,IAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAUC,EAAKE,UAAf,KAA4BF,EAAKG,WAAa,GAA9C,IAAmDH,EAAKI,gB,kCCF1D,8GAyBeC,UAlBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAETC,EAAYD,EAAKE,KAAKC,aAAaC,MACnCC,EAASL,EAAKK,OAAOC,MAG3B,OACE,kBAAC,IAAD,CAAQF,MAAOH,GACb,kBAAC,IAAD,CAAKG,MAAOH,IACZ,kBAAC,IAAD,CAAWI,OAAQA,EAAQE,SARd,SAmBZ,IAAMC,EAAS,c,2GCpBhBC,EAAYC,IAAOC,QAAV,uEAAGD,CAAH,gUAKWE,IAAOC,SACtBD,IAAOE,SAQSF,IAAOG,UACVH,IAAOI,MAKlBJ,IAAOE,UAIdG,EAAaP,IAAOQ,GAAV,wEAAGR,CAAH,wHAKHE,IAAOE,SAKPF,IAAOE,SACeF,IAAOG,WAIpCI,EAAWT,IAAOU,KAAV,sEAAGV,CAAH,qDAKRW,EAAYX,IAAOY,IAAV,uEAAGZ,CAAH,yCAKTa,EAAab,YAAOc,QAAV,wEAAGd,CAAH,0EAgCDe,EArBD,SAAC,GAAiC,IAA/BrB,EAA8B,EAA9BA,MAAOV,EAAuB,EAAvBA,KAAMgC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAClC,OACE,kBAAClB,EAAD,KACE,kBAACQ,EAAD,KACE,kBAACM,EAAD,CAAYK,GAAID,GAAOvB,EAAvB,MAEF,kBAACiB,EAAD,KACG3B,GAAQ,kBAACyB,EAAD,cAAiB3B,YAAWE,IACpCgC,GAAQ,wCAAcA,M,YCzElBG,EAAiB,SAACtB,EAAUuB,GACvC,OAAOC,EAAaD,GAAKvB,ICIrByB,EAAiBtB,IAAOuB,GAAV,4EAAGvB,CAAH,yKA6DLwB,IAvCG,SAAC,GAA0B,IAAxB7B,EAAuB,EAAvBA,OAAQE,EAAe,EAAfA,SAG3B,OACE,oCACE,4BAAKsB,EAAetB,EAAU,oBAC9B,4BAAKsB,EAAetB,EAAU,uBAC9B,2BAAIsB,EAAetB,EAAU,uBAC7B,4BAAKsB,EAAetB,EAAU,0BAE9B,kBAACyB,EAAD,KACG3B,EAAO8B,KAAI,SAAAC,GAAK,OACf,wBAAIN,IAAKM,EAAMC,KAAKC,YAAYlC,OAC9B,kBAAC,EAAD,CACEA,MAAOgC,EAAMC,KAAKC,YAAYlC,MAC9BV,KAAM0C,EAAMC,KAAKC,YAAY5C,KAC7BgC,KAAMU,EAAMC,KAAKC,YAAYZ,KAC7BC,KAAMS,EAAMC,KAAKE,OAAOZ,e","file":"component---src-pages-index-jsx-cbeabe302a9266cd34b2.js","sourcesContent":["export const formatDate = dateString => {\n  const date = new Date(dateString)\n  return `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/Seo\"\nimport IndexPage from \"../components/IndexPage\"\n\nconst Index = ({ data }) => {\n  const langCode = \"en\"\n  const siteTitle = data.site.siteMetadata.title\n  const events = data.events.edges\n  // const organizers = data.organizers.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO title={siteTitle} />\n      <IndexPage events={events} langCode={langCode} />\n    </Layout>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.any,\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    events: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { eq: \"event\" }, lang: { eq: \"en\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            host\n            date\n            speakers\n            lang\n          }\n        }\n      }\n    }\n    organizers: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { eq: \"organizer\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n            github\n          }\n          html\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport { colors } from \"../utils/styles\"\nimport { formatDate } from \"../utils/utils\"\n\nconst EventCard = styled.article`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1.2em;\n  border: 0.5rem dashed ${colors.darkPink};\n  color: ${colors.darkGrey};\n  line-height: 2rem;\n  min-height: 13em;\n  border-radius: 0.5em;\n  position: relative;\n  &:hover,\n  &:focus-within {\n    cursor: pointer;\n    border: 0.5rem solid ${colors.lightPink};\n    background-color: ${colors.white};\n    transform: rotate(0.8deg);\n  }\n\n  &:hover a {\n    color: ${colors.darkGrey};\n  }\n`\n\nconst EventTitle = styled.h3`\n  margin-top: 0.8em;\n  color: inherit;\n\n  & > a {\n    color: ${colors.darkGrey};\n  }\n\n  & > a:hover,\n  & > a:focus {\n    color: ${colors.darkGrey};\n    border-bottom: 0.25rem solid ${colors.lightPink};\n  }\n`\n\nconst DateSpan = styled.span`\n  text-transform: uppercase;\n  box-sizing: border-box;\n`\n\nconst EventInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledLink = styled(Link)`\n  &:after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`\n\nconst Event = ({ title, date, host, slug }) => {\n  return (\n    <EventCard>\n      <EventTitle>\n        <StyledLink to={slug}>{title} </StyledLink>\n      </EventTitle>\n      <EventInfo>\n        {date && <DateSpan>Date: {formatDate(date)}</DateSpan>}\n        {host && <p>Hosted by {host}</p>}\n      </EventInfo>\n    </EventCard>\n  )\n}\n\nEvent.propTypes = {\n  title: PropTypes.string.isRequired,\n  host: PropTypes.string,\n  slug: PropTypes.string.isRequired,\n  date: PropTypes.string,\n}\n\nexport default Event\n","import translations from \"./translations.json\"\n\nexport const getTranslation = (langCode, key) => {\n  return translations[key][langCode]\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport Event from \"./Event\"\n//import Bio from \"./Bio\"\nimport { getTranslation } from \"../utils/translations/helpers\"\n\nconst EventContainer = styled.ul`\n  margin: 0 auto;\n  list-style-type: none;\n  display: grid;\n  grid-gap: 1rem;\n\n  @supports (width: min(2rem, 100%)) {\n    grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));\n  }\n`\n/*\nconst OrganizerContainer = styled.div`\n  display: grid;\n  grid-template-columns: 33% 33% 33%;\n  column-gap: 1em;\n  row-gap: 1em;\n  @media (max-width: 650px) {\n    grid-template-columns: 100%;\n  }\n`\n*/\n\nconst IndexPage = ({ events, langCode }) => {\n  // const organizers = data.organizers.edges <-- This has to be added as props when we'll add it\n\n  return (\n    <>\n      <h1>{getTranslation(langCode, \"frontpage.title\")}</h1>\n      <h2>{getTranslation(langCode, \"frontpage.preamble\")}</h2>\n      <p>{getTranslation(langCode, \"frontpage.infotext\")}</p>\n      <h2>{getTranslation(langCode, \"frontpage.past-events\")}</h2>\n\n      <EventContainer>\n        {events.map(event => (\n          <li key={event.node.frontmatter.title}>\n            <Event\n              title={event.node.frontmatter.title}\n              date={event.node.frontmatter.date}\n              host={event.node.frontmatter.host}\n              slug={event.node.fields.slug}\n            />\n          </li>\n        ))}\n      </EventContainer>\n      {/* TODO implement this */}\n      {/* <OrganizerContainer>\n        {organizers.map(organizer => <Bio\n          key={organizer.node.frontmatter.github}\n          name={organizer.node.frontmatter.name}\n          github={organizer.node.frontmatter.github}\n        />)}\n      </OrganizerContainer> */}\n    </>\n  )\n}\n\nIndexPage.propTypes = {\n  events: PropTypes.any,\n  langCode: PropTypes.string,\n}\n\nexport default IndexPage\n"],"sourceRoot":""}