{"version":3,"sources":["webpack:///./src/components/Event.jsx","webpack:///./src/utils/utils.js","webpack:///./src/pages/index.jsx"],"names":["EventCard","styled","div","colors","darkPink","darkGrey","lightPink","white","EventTitle","h3","DateSpan","span","EventInfo","StyledLink","Link","Event","title","date","host","slug","to","dateString","Date","getDate","getMonth","getFullYear","formatDate","EventContainer","ul","pageQuery","Index","data","siteTitle","site","siteMetadata","events","edges","Layout","map","event","key","node","frontmatter","fields"],"mappings":"iOAOMA,EAAYC,IAAOC,IAAV,uEAAGD,CAAH,gUAKWE,IAAOC,SACtBD,IAAOE,SAQSF,IAAOG,UACVH,IAAOI,MAKlBJ,IAAOE,UAIdG,EAAaP,IAAOQ,GAAV,wEAAGR,CAAH,wHAKHE,IAAOE,SAKPF,IAAOE,SACeF,IAAOG,WAIpCI,EAAWT,IAAOU,KAAV,sEAAGV,CAAH,qDAKRW,EAAYX,IAAOC,IAAV,uEAAGD,CAAH,yCAKTY,EAAaZ,YAAOa,QAAV,wEAAGb,CAAH,0EA8BDc,EAnBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,KAAtB,OACZ,kBAACnB,EAAD,KACE,kBAACQ,EAAD,KACE,kBAACK,EAAD,CAAYO,GAAID,GAAOH,EAAvB,MAEF,kBAACJ,EAAD,KACGK,GAAQ,kBAACP,EAAD,cCzEW,SAAAW,GACxB,IAAMJ,EAAO,IAAIK,KAAKD,GACtB,OAAUJ,EAAKM,UAAf,KAA4BN,EAAKO,WAAa,GAA9C,IAAmDP,EAAKQ,cDuE1BC,CAAWT,IACrC,wCAAcC,MEjEdS,EAAiB1B,IAAO2B,GAAV,4EAAG3B,CAAH,yKAuEP4B,GAFEC,UA/CD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACTC,EAAYD,EAAKE,KAAKC,aAAalB,MACnCmB,EAASJ,EAAKI,OAAOC,MAG3B,OACE,kBAACC,EAAA,EAAD,CAAQrB,MAAOgB,GACb,kBAAC,IAAD,CAAKhB,MAAOgB,IACZ,wCACA,mEACA,oUAOA,2CAEA,kBAACL,EAAD,KACGQ,EAAOG,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,EAAME,KAAKC,YAAY1B,OAC9B,kBAAC,EAAD,CACEA,MAAOuB,EAAME,KAAKC,YAAY1B,MAC9BC,KAAMsB,EAAME,KAAKC,YAAYzB,KAC7BC,KAAMqB,EAAME,KAAKC,YAAYxB,KAC7BC,KAAMoB,EAAME,KAAKE,OAAOxB,cAuBhB","file":"component---src-pages-index-jsx-8a7d4ba4df5a2baa40da.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport { colors } from \"../utils/styles\"\nimport { formatDate } from \"../utils/utils\"\n\nconst EventCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1.2em;\n  border: 0.5rem dashed ${colors.darkPink};\n  color: ${colors.darkGrey};\n  line-height: 2rem;\n  min-height: 13em;\n  border-radius: 0.5em;\n  position: relative;\n  &:hover,\n  &:focus-within {\n    cursor: pointer;\n    border: 0.5rem solid ${colors.lightPink};\n    background-color: ${colors.white};\n    transform: rotate(0.8deg);\n  }\n\n  &:hover a {\n    color: ${colors.darkGrey};\n  }\n`\n\nconst EventTitle = styled.h3`\n  margin-top: 0.8em;\n  color: inherit;\n\n  & > a {\n    color: ${colors.darkGrey};\n  }\n\n  & > a:hover,\n  & > a:focus {\n    color: ${colors.darkGrey};\n    border-bottom: 0.25rem solid ${colors.lightPink};\n  }\n`\n\nconst DateSpan = styled.span`\n  text-transform: uppercase;\n  box-sizing: border-box;\n`\n\nconst EventInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledLink = styled(Link)`\n  &:after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`\n\nconst Event = ({ title, date, host, slug }) => (\n  <EventCard>\n    <EventTitle>\n      <StyledLink to={slug}>{title} </StyledLink>\n    </EventTitle>\n    <EventInfo>\n      {date && <DateSpan>Date: {formatDate(date)}</DateSpan>}\n      <p>Hosted by {host}</p>\n    </EventInfo>\n  </EventCard>\n)\n\nEvent.propTypes = {\n  title: PropTypes.string.isRequired,\n  host: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  date: PropTypes.string,\n}\n\nexport default Event\n","export const formatDate = dateString => {\n  const date = new Date(dateString)\n  return `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()}`\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/Seo\"\nimport Event from \"../components/Event\"\n//import Bio from \"../components/Bio\"\nimport styled from \"styled-components\"\n\nconst EventContainer = styled.ul`\n  margin: 0 auto;\n  list-style-type: none;\n  display: grid;\n  grid-gap: 1rem;\n\n  @supports (width: min(2rem, 100%)) {\n    grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));\n  }\n`\n/*\nconst OrganizerContainer = styled.div`\n  display: grid;\n  grid-template-columns: 33% 33% 33%;\n  column-gap: 1em;\n  row-gap: 1em;\n  @media (max-width: 650px) {\n    grid-template-columns: 100%;\n  }\n`\n*/\n\nconst Index = ({ data }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const events = data.events.edges\n  // const organizers = data.organizers.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO title={siteTitle} />\n      <h1>Turku.py</h1>\n      <h2>We are a computer science community</h2>\n      <p>\n        Turku.py is a programming community for women and non-binaries in Turku,\n        Finland. We organize meetups, workshops and afterworks that aim to\n        support the local tech culture, share skills and knowlegde and inspire\n        people from minority groups in the fields of programming, devops and\n        data science.\n      </p>\n      <h2>Past events</h2>\n\n      <EventContainer>\n        {events.map(event => (\n          <li key={event.node.frontmatter.title}>\n            <Event\n              title={event.node.frontmatter.title}\n              date={event.node.frontmatter.date}\n              host={event.node.frontmatter.host}\n              slug={event.node.fields.slug}\n            />\n          </li>\n        ))}\n      </EventContainer>\n      {/* TODO implement this */}\n      {/* <OrganizerContainer>\n        {organizers.map(organizer => <Bio\n          key={organizer.node.frontmatter.github}\n          name={organizer.node.frontmatter.name}\n          github={organizer.node.frontmatter.github}\n        />)}\n      </OrganizerContainer> */}\n    </Layout>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.any,\n}\n\nexport default Index\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    events: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { eq: \"event\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            host\n            date\n            speakers\n          }\n        }\n      }\n    }\n    organizers: allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { eq: \"organizer\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            name\n            github\n          }\n          html\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}